#!/usr/bin/env python
# encoding: utf-8
'''Python C extension Assistant

Generates Python C API interface code to aid in C extension development.

Copyright (c) 2009 Rasmus Andersson
Licensed under the MIT license.
'''
import sys, os
import skeleton, datetime
from optparse import OptionParser
from subprocess import Popen, PIPE

__version__ = '0.1.1'

opts = None
optp = None
outf = sys.stdout
commands = {}

YEAR_NOW = '%04d' % datetime.datetime.now().year
PTYPE_TO_STORAGE = {
  # p: ((type, default)[, length_type])
  's' : [['const char *','NULL']],
  's#': [['const char *','NULL'], 'int '],
  's*': [['Py_buffer *','NULL']],
  'z' : [['const char *','NULL']],
  'z#': [['const char *','NULL'], 'int '],
  'z*': [['Py_buffer *','NULL']],
  'u' : [['Py_UNICODE *','NULL']],
  'u#': [['Py_UNICODE *','NULL'], 'int '],
  'b' : [['unsigned char ',"'\0'"]],
  'B' : [['unsigned char ',"'\0'"]],
  'h' : [['short ','0']],
  'H' : [['unsigned short ','0U']],
  'i' : [['int ','0']],
  'I' : [['unsigned int ','0']],
  'l' : [['long ','0L']],
  'k' : [['unsigned long ','0UL']],
  'L' : [['Py_LONG_LONG ','0LL']],
  'K' : [['unsigned PY_LONG_LONG ','0ULL']],
  'n' : [['Py_ssize_t ','0']],
  'c' : [['char ',"'\0'"]],
  'f' : [['float ','0.0f']],
  'd' : [['double ','0.0']],
  'D' : [['Py_complex ','{0.0, 0.0}']],
  'O' : [['PyObject *','NULL']],
  'S' : [['PyStringObject *', 'NULL']],
  'U' : [['PyUnicodeObject *', 'NULL']],
  't#': [['char *', 'NULL'], 'int '],
  'w' : [['char *','NULL']],
  'w#': [['char *', 'NULL'], 'Py_ssize_t '],
  'w*': [['Py_buffer *', 'NULL']]
}


#-----------------------------------------------------------------------------
# Utilities


def sh(args, cwd=None, silent=True):
  '''Returns stdout as string.
  Raises IOError on failure (if silent is false, also on non-zero return).
  '''
  if cwd is None:
    cwd = os.path.abspath('.')
  if not isinstance(args, (list, tuple)):
    args = [args]
  ps = Popen(args, shell=True, cwd=cwd, stdout=PIPE, stderr=PIPE, close_fds=True)
  stdout, stderr = ps.communicate()
  if ps.returncode != 0:
    stderr = stderr.strip()
    if silent and not stderr.endswith(': command not found'):
      return '\n'.join([stdout.strip(), stderr]).strip()
    raise IOError('Shell command %s failed (exit status %r): %s' %\
      (args, ps.returncode, stderr))
  return stdout.strip()


def error(msg, cmdname=None, display_help=False):
  msg = msg.strip()
  if msg and msg[-1] != '.':
    msg += '.'
  if display_help:
    optp.error(msg)
  else:
    see = optp.get_prog_name() + " --help"
    if cmdname:
      see = optp.get_prog_name() + " help " + cmdname
    optp.exit(2, "%s: error: %s See %r.\n" % (optp.get_prog_name(), msg, see))


def parse_author(author):
  if not author:
    return guess_author()
  
  author = author.rstrip('> ')
  name = email = author
  p = author.find('<')
  
  if p == 0:
    # <fred@boll.com>
    author = author.strip('< ')
    name = email = author
    p = email.find('@')
    if p != -1:
      name = email[:p] # fred@boll.com -> fred
      author = '<%s>' % email
  elif p > 0:
    # Fred Boll <fred@boll.com>
    name = author[:p].strip()
    email = author[p:].strip('< ')
    author = '%s <%s>' % (name, email)
  else:
    p = email.find('@')
    if p != -1:
      # fred@boll.com
      name = email[:p] # fred@boll.com -> fred
      author = '<%s>' % email
    else:
      # Fred Boll
      email = ''
  
  return (author, name, email)


def guess_author():
  name_email = guess_name_email()
  if isinstance(name_email, str):
    if not name_email:
      raise ValueError('empty string returned')
    return parse_author(name_email)
  if not name_email:
    name = email = None
  else:
    name, email = name_email
  if not email:
    email = os.environ.get('EMAIL')
  if not name:
    name = os.environ.get('USER', email or os.environ.get('EMAIL'))
  if email:
    author = '%s <%s>' % (name, email)
  else:
    author = name
  return (author, name, email)


def guess_name_email():
  env = os.environ
  
  # PYCA_AUTHOR in env
  if 'PYCA_AUTHOR' in env:
    return env['PYCA_AUTHOR']
  
  # AUTHOR in env
  if 'AUTHOR' in env:
    return env['AUTHOR']
  
  # git
  try:
    return (sh('git config --global --get user.name'), 
            sh('git config --global --get user.email'))
  except IOError:
    pass
  
  # mercurial
  try:
    for line in sh('hg showconfig').split('\n'):
      p = line.find('.username=')
      if p != -1:
        return line[p+len('.username='):].strip()
  except IOError:
    pass
  
  # textmate
  if 'TM_ORGANIZATION_NAME' in env:
    return env['TM_ORGANIZATION_NAME']


def parse_cmd_opts(cmdmain, args):
  global opts
  opts2, args = cmdmain.optp.parse_args(args)
  opts.__dict__.update(opts2.__dict__)
  return opts, args


def parse_cmd_doc(cmdmain, brief=False):
  doc = cmdmain.__doc__.strip()
  if not brief:
    return doc.replace('\n  ', '\n')
  s = []
  prev_blank = False
  for line in doc.split('\n'):
    if not line.strip():
      if prev_blank:
        break
      prev_blank = True
    elif prev_blank:
      if line.startswith('  '):
        line = line[2:]
      s.append(line)
  return '\n'.join(s)


def init_cmd(cmdmain):
  global commands
  commands[cmdmain.__name__[5:]] = cmdmain
  cmdmain.optp = OptionParser(usage=parse_cmd_doc(cmdmain))
  return cmdmain.optp


#-----------------------------------------------------------------------------
# Code generation


def parse_func(spec, method=None):
  spec = spec.strip()
  m = dict(
    modules=[],
    cls='',
    name='',
    args=[],
    sig='',
    path=[],
    sigorig=spec,
  )
  argsp = spec.find('(')
  if argsp != -1:
    path = spec[:argsp].split('.')
    args = spec[argsp+1:].rstrip(')')
  else:
    path = spec.split('.')
    args = ''
  
  if (method and len(path) < 3) or (not method and len(path) < 2):
    prefix = 'func'
    if method:
      prefix = method
    error('[%s] incomplete path -- expected something like: %s' % (prefix, 'mymodule.'+spec), 'show')
  
  if method:
    m['modules'] = path[:-2]
    m['cls'] = path[-2]
  else:
    m['modules'] = path[:-1]
  m['name'] = path[-1]
  
  av = []
  for part in [s for s in args.split(',') if s]:
    arg = {}
    eqp = part.find('=')
    if eqp != -1:
      name = part[:eqp].rstrip()
      arg['default'] = part[eqp+1:].lstrip()
    else:
      name = part
    namev = [s for s in name.split(' ') if s]
    if len(namev) > 1:
      arg['type'] = namev[0]
      name = namev[1]
    arg['name'] = name
    av.append(arg)
  
  m['args'] = av
  
  argsig = []
  for arg in m['args']:
    if 'default' in arg:
      argsig.append('%s=%s' % (arg['name'], arg['default']))
    else:
      argsig.append(arg['name'])
  argsig = ', '.join(argsig)
  m['argsig'] = argsig
  
  sigcls = ''
  if method:
    sigcls = m['cls'] + '.'
  m['sig'] = '%s.%s(%s)' % (
    '.'.join(m['modules']),
    sigcls + m['name'],
    argsig
  )
  
  m['pathv'] = path
  m['path'] = '.'.join(path)
  m['path_'] = '_'.join(path)
  m['parent_path'] = '.'.join(path[:-1])
  m['parent_path_'] = '_'.join(path[:-1])
  
  return m


def format_func_doc(spec, method=False):
  content = ''
  if not method:
    content = '.. function:: %(name)s(%(argsig)s)\n' % spec
  elif method == 'static':
    content = '  .. staticmethod:: %(name)s(%(argsig)s)\n' % spec
  else:
    content = '  .. method:: %(name)s(%(argsig)s)\n' % spec
  return ('docs/source/%(path)s.rst' % spec, content)


def format_func_h(spec, method=False):
  params = []
  selfdef = ''
  
  if method and method != 'static':
    selfdef = 'PyObject *self, '
  
  for arg in spec['args']:
    t = arg.get('type', 'O')
    try:
      t = PTYPE_TO_STORAGE[t][0][0]
    except KeyError:
      error('unsupported storage type %r' % t)
    if 'default' in arg:
      params.append('%s%s = %s' % (t, arg['name'], arg['default']))
    else:
      params.append(t + arg['name'])
  
  if params:
    params = '\n * '.join(['@param '+s for s in params])
  else:
    params = '(no parameters)'
  spec.update(dict(
    params=params,
    selfdef=selfdef
  ))
  
  return ('src/%(parent_path_)s.h' % spec, '''
/**
 * %(params)s
 */
PyObject *%(path_)s(%(selfdef)sPyObject *args, PyObject *kwargs);
''' % spec)


def format_func_c(spec, method=False):
  storage = []
  cstspec = [] # "Os#|z"
  cstrefs = [] # &arg1, &arg2, &arg2_length, &arg3
  kwlist  = [] # "arg1", "arg2", "arg3"
  added_optional_divider = False
  selfdef = ''
  
  if method and method != 'static':
    selfdef = 'PyObject *self, '
  
  for arg in spec['args']:
    t = arg.get('type', 'O')
    try:
      cstv = PTYPE_TO_STORAGE[t]
    except KeyError:
      error('unsupported storage type %r' % t)
    
    default = None
    for i,cst in enumerate(cstv):
      if i == 0:
        default = arg.get('default', cst[1])
        cstname = arg['name']
        cst = cst[0]
      else:
        default = len(eval(default))
        cstname = arg['name'] + '_length'
      storage.append('  %s%s = %s;' % (cst, cstname, default))
      cstrefs.append(cstname)
    
    if not added_optional_divider and 'default' in arg:
      cstspec.append('|')
      added_optional_divider = True
    elif added_optional_divider and not 'default' in arg:
      error('%s: Missing default value for keyword argument %r appearing after '\
        'first optional argument' % (spec['sigorig'], arg['name']))
    
    cstspec.append(t)
    kwlist.append(arg['name'])
  
  spec.update(dict(
    storage='\n'.join(storage),
    cstspec=''.join(cstspec),
    cstrefs=', '.join(['&'+s for s in cstrefs]),
    kwlist=', '.join(['"%s"' % s for s in kwlist]),
    selfdef=selfdef
  ))
  
  args_body = ''
  if kwlist:
    args_body = '''
%(storage)s
  static char *kwlist[] = {%(kwlist)s, NULL};

  /* Parse arguments */
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "%(cstspec)s:%(name)s", kwlist,
    %(cstrefs)s))
  {
    return NULL;
  }
  
''' % spec
    args_body = args_body.strip('\n')+'\n'
  spec['args_body'] = args_body
  return ('src/%(parent_path_)s.c' % spec, '''
/**
 * %(sigorig)s
 */
PyObject *%(path_)s(%(selfdef)sPyObject *args, PyObject *kwargs) {
%(args_body)s  /* TODO: implementation */
  PyErr_SetString(PyExc_NotImplementedError, "%(path)s");
  return NULL;
}
''' % spec)

#-----------------------------------------------------------------------------
# commands and main

def main_show_func(specs, method=False):
  files = []
  
  for spec in specs:
    spec = parse_func(spec, method=method)
    files.append(format_func_doc(spec, method=method))
    files.append(format_func_h(spec, method=method))
    files.append(format_func_c(spec, method=method))
  
  for name,content in files:
    outf.write('> %s:\n' % name)
    outf.write('  ')
    outf.write(content.strip('\n').replace('\n', '\n  '))
    outf.write('\n\n')
  
  return files


def main_show_meth(specs):
  return main_show_func(specs, 'instance')


def main_show_smeth(specs):
  return main_show_func(specs, 'static')


def main_show(args):
  '''
  Usage: %prog show <signature>
         %prog show <type> <signature> [<type> <signature> ...]
  
  Generate and display Python C code.
  
  Examples:
  
    Show a function:
      %prog show 'mymod.myfunc(i size, s message = "hello")'
  
    Show a method and a function:
      %prog show meth 'mymod.MyClass.mymeth(i size, s message = "hello")'\\
                func 'mymod.myfunc(i size, s message = "hello")'
    
    Show a static method:
      %prog show smeth 'mymod.MyClass.mymeth(i size, s message = "hello")'
  
  Type hinting is (optionally) performed by adding a PyArg_Parse symbol in front
  of arguments.
  '''
  opts, args = parse_cmd_opts(main_show, args)
  types = ['func', 'meth', 'smeth']
  
  if len(args) == 0:
    error('at least one signature is required', 'show')
  
  if len(args) > 2 and len(args) % 2 != 0:
    error('incomplete arguments -- missing type or signature', 'show')
  
  if len(args) < 2:
    args[0:0] = ['func']
  
  for i in range(len(args)/2):
    typ = args[i*2].lower()
    sig = args[(i*2)+1]
    if typ not in types:
      error('invalid type %r' % typ)
    eval('main_show_'+typ)([sig])

p = init_cmd(main_show)


def main_init(args):
  '''
  Usage: %prog init [options] <name> [<path>]
  
  Create and initialize a new project.
  
  If <path> is not specified it defaults to './' + <name>
  '''
  opts, args = parse_cmd_opts(main_init, args)
  
  # module
  if not args:
    error('You must specify the name of the module.', 'init')
  module = args[0]
  
  # title
  if opts.title is None:
    opts.title = module
  
  # replacements
  replace = dict(
    PROJECT_MODULE = module,
    PROJECT_MODULE_UPPER = module.upper(),
    PROJECT_TITLE = opts.title,
    PROJECT_URL = opts.url,
    PROJECT_YEAR = opts.year
  )
  
  # author
  (replace['PROJECT_AUTHOR'], 
   replace['PROJECT_AUTHOR_NAME'], 
   replace['PROJECT_AUTHOR_EMAIL']) = parse_author(opts.author)
  
  # paths
  skeletonpath = os.path.join(os.path.dirname(os.path.abspath(__file__)), 'skeleton')
  license_srcpath = os.path.join(skeletonpath, 'licenses', opts.license.lower())
  srcpath = os.path.join(skeletonpath, 'project')
  dstpath = None
  if len(args) > 1:
    dstpath = args[1]
  else:
    dstpath = replace['PROJECT_MODULE']
  if os.path.exists(dstpath):
    error('destination directory %r already exists' % dstpath, 'init')
  license_dstpath = os.path.join(dstpath, 'LICENSE')
  if not os.path.isfile(license_srcpath):
    available_licenses = [s for s in os.listdir(os.path.join(skeletonpath, 'licenses')) if not s.startswith('.')]
    error('%r is not a valid license. Choose one of: %s' %
      (opts.license.lower(), ', '.join(available_licenses)), 'init')
  
  # path subs
  path_subs = {
    'lib/module': 'lib/'+module
  }
  
  # print configuration
  if opts.verbose:
    dry_run_info = ''
    if opts.dry_run:
      dry_run_info = ' (dry run)'
    print 'Creating new project %r in %r%s' % (dstpath, os.path.abspath(dstpath), dry_run_info)
    for k in sorted(replace.keys()):
      v = replace[k]
      print '  %-22s => %r' % (k, v)
  
  # set event callback for skeleton
  if opts.verbose:
    def event_cb(ev, src, dst, *va):
      if ev == 'sub' and len(va[0]):
        # also print number of substitutions
        print '%-3s %-3d %s' % (ev, len(va[0]), dst)
      elif ev != 'ign':
        print '%-3s     %s' % (ev, dst)
  else:
    event_cb = None
  
  # create project tree
  try:
    skeleton.copy_tree(srcpath, dstpath, subs=replace, event_cb=event_cb, dry_run=opts.dry_run,
                       ignore_re=r'.+/(\.DS_Store$|\._.*|.*\.psd$)', path_subs=path_subs)
  except OSError, e:
    if e.errno != 17:
      raise
    error(e, 'init')
  
  # copy license
  skeleton.copy_template_file(license_srcpath, license_dstpath, subs=replace, event_cb=event_cb,
                              dry_run=opts.dry_run)

# init options:
p = init_cmd(main_init)
p.add_option("", "--dry-run", dest="dry_run", default=False, action="store_true",
  help="Simulate but don't actually do anything.")
p.add_option("-t", "--title", dest="title", metavar="<title>", default=None,
  help="Human-readable title of project. Defaults to <name>.")
p.add_option("-a", "--author", dest="author", metavar="<author>", default=None,
  help="Author of the project. If not set, author will be guessed.")
p.add_option("-u", "--url", dest="url", metavar="<url>", default='',
  help="URL pointing to more information.")
p.add_option("-y", "--year", dest="year", metavar="<year>", default=YEAR_NOW,
  help="Copyright year. Defaults to "+YEAR_NOW)
p.add_option("-l", "--license", dest="license", metavar="<license>", default='mit',
  help="Software license. Defaults to 'mit' (for a list of available licenses, "\
       "see contents of directory <pycadir>/skeleton/licenses)")

def main_help(args):
  '''
  %prog help [COMMAND]
  
  Display help about a certain command or %prog itself.
  '''
  global commands
  if args:
    try:
      cmdmain = commands[args[0]]
    except KeyError:
      error('no such command %r' % args[0])
    cmdmain.optp.print_help()
  else:
    optp.print_help()
  sys.exit(1)

init_cmd(main_help)

def main():
  global opts, optp, commands
  
  usage = '%prog [options] COMMAND [ARGS]\n\nCommands:\n'
  for cmdname in sorted(commands):
    cmdmain = commands[cmdname]
    doc = parse_cmd_doc(cmdmain, brief=True)
    usage += '  %-10s  %s\n' % (cmdname, str(doc).strip())
  usage = usage.rstrip()
  
  optp = OptionParser(usage=usage, version=__version__)
  optp.add_option("-q", "--quiet",
                  action="store_false", dest="verbose", default=True,
                  help="Don't print status messages to stdout")
  optp.disable_interspersed_args()
  opts, args = optp.parse_args()
  
  if len(args) == 0:
    optp.print_help()
    print >>sys.stderr, "\nSee '%s help COMMAND' for more information on a specific command" %\
      optp.get_prog_name()
    sys.exit(1)
  
  try:
    cmd = commands[args[0]]
  except KeyError:
    error('%r is not a command' % args[0])
  
  cmd(args[1:])

if __name__ == "__main__":
  main()
